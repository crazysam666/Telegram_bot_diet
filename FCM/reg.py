from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import Database
import datetime


db = Database('dietbase.db')

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

class OrderReg(StatesGroup):
    waiting_name = State()
    waiting_age = State()
    waiting_height = State()
    waiting_weight = State()

# –†–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /reg:
async def reg_start(message: types.Message):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –§–∞–º–∏–ª–∏—é –∏ –∏–º—è: \n(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è)")
    await OrderReg.waiting_name.set()

async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "name"
async def parametr_name(message: types.Message, state: FSMContext):
    await state.update_data(name=str(message.text))
    user_data = await state.get_data()
    await OrderReg.waiting_age.set()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "age"
async def parametr_age(message: types.Message, state: FSMContext):
    if not message.text.isalnum():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return
    await state.update_data(age=int(message.text))
    user_data = await state.get_data()
    await OrderReg.waiting_height.set()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç\n\
(–Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö, 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.60)):")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "height"
async def parametr_height(message: types.Message, state: FSMContext):
    if not is_number(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: \n\
—Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏!")
        return
    await state.update_data(height=float(message.text))
    await OrderReg.waiting_weight.set()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–µ—Å (–Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –∫–≥,\n\
—Å —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50.5)):")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "weight"
async def parametr_weight(message: types.Message, state: FSMContext):
    if not is_number(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤,\n\
            —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏!")
        return
    await state.update_data(weight=float(message.text))
    user_data = await state.get_data()
    imt = round(user_data['weight']/((user_data['height'])**2), 1)
    db.set_users(message.from_user.id, user_data['name'], user_data['age'], user_data['height'], user_data['weight'], datetime.date.today())
    await message.answer(f"–í–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ = {imt}\n")
    await state.finish()

async def admin_start(message: types.Message):
    if message['from']['id'] == *********** or ***********:
        a = db.exists()
        await message.answer(a)
    else:
        await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!".format())


def register_handlers_reg(dp: Dispatcher):
    dp.register_message_handler(reg_start, text="üíó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", state="*")
    dp.register_message_handler(cmd_cancel, commands="cancel", state="*")
    dp.register_message_handler(admin_start, commands="admin", state="*")
    dp.register_message_handler(parametr_name, state=OrderReg.waiting_name)
    dp.register_message_handler(parametr_age, state=OrderReg.waiting_age)
    dp.register_message_handler(parametr_height, state=OrderReg.waiting_height)
    dp.register_message_handler(parametr_weight, state=OrderReg.waiting_weight)



