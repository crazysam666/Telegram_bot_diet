from aiogram import Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import Database
import datetime
from text import rec1

db = Database('dietbase.db')

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

class Upd_Weight(StatesGroup):
    waiting_weight = State()

# —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /update:
async def upd_start(message: types.Message):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–≤—ã–π –≤–µ—Å, —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏. –Ω–∞–ø—Ä–∏–º–µ—Ä: 60.5 –∏–ª–∏ 56.0".format())
    await Upd_Weight.waiting_weight.set() # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö

# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ reg:
async def upd_weight(message: types.Message):
    db.update_weight(message.from_user.id, message.text, datetime.date.today())
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

# –ü–æ –∫–Ω–æ–ø–∫–µ ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
async def recom(message: types.Message):
    await message.answer(rec1)
    

def register_handlers_upd(dp: Dispatcher):
    dp.register_message_handler(upd_start, text="üìè –í–µ—Å", state="*")
    dp.register_message_handler(recom, text="‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", state="*")    
    dp.register_message_handler(upd_weight, state=Upd_Weight.waiting_weight)
