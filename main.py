import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import BotCommand
from auth_data import TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
# photo = open('usr//bot//imt.png', 'rb')



async def set_commands(bot: Bot):
    commands = [
        BotCommand(text="üíó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        BotCommand(text="‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
        BotCommand(text="üìè –í–µ—Å", description="–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤–µ—Å–∞"),
        BotCommand(command="/calc", description="–ü–æ—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢"),
        BotCommand(command="/links", description="–°—Å—ã–ª–∫–∏"),
        BotCommand(command="/cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        BotCommand(command="/admin", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command="/carts", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏")
    ]
    await bot.set_my_commands(commands)



# @dp.message_handler(commands=['carts'])
# async def send_carts(message: types.Message):   
#     await bot.send_photo(chat_id=message.chat.id, photo=photo)


# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
# def auth(func):
#     async def wrapper(message):
#         if message['from']['id'] != **********:
#             return await message.reply("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", reply=False)
#         return await func(message)
#     return wrapper

# —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /admin:
# @auth




if __name__ == '__main__':
    from handlers import dp
    from FCM import register_handlers_upd, register_handlers_reg, register_handlers_calc
     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    register_handlers_calc(dp)
    register_handlers_reg(dp)
    register_handlers_upd(dp)
    executor.start_polling(dp, skip_updates = True)

# --- –û—Ç–≤–µ—Ç –Ω–∞ —Å–º–∞–π–ª —Å–º–∞–π–ª–æ–º ---
# @dp.message_handler(content_types=[types.ContentType.ANIMATION])
# async def echo_document(message: types.Message):
#     await message.reply_animation(message.animation.file_id)



# # --- –û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∫–æ–π —Ç–æ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ---
# @dp.message_handler(content_types=['text'])
# async def echo_document(message: types.Message):
#     if message.text.lower() == "–ø–æ–∫–∞":
#         await message.answer("–ø–æ–∫–∞")


# @dp.message_handler()
# async def bot_message(message: types.Message):
#     if message.text == 'üçú –†–∞–Ω–¥–æ–º–Ω–æ–µ –º–µ–Ω—é':
#         await bot.send_message(message.from_user.id, "–í–∞—à–µ —á–∏—Å–ª–æ: " + str(random.randint(1000, 9999)))

#     elif message.text == '‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
#         await bot.send_message(message.from_user.id, '‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = nav.mainMenu)
    
#     elif message.text == 'üç∏ –î—Ä—É–≥–æ–µ':
#         await bot.send_message(message.from_user.id, 'üç∏ –î—Ä—É–≥–æ–µ', reply_markup = nav.otherMenu)

#     elif message.text == 'üíÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
#         await bot.send_message(message.from_user.id, 'üíÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', reply_markup = nav.profMenu)

#     elif message.text == 'üëÄ –ü—Ä–æ—Ñ–∏–ª—å':
#         await bot.send_message(message.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è')

#     elif message.text == 'üíó –ü–æ–¥–ø–∏—Å–∫–∞':
#         await bot.send_message(message.from_user.id, '–°—Ç—Ä–∞–Ω–∏—á–∫–∞ –∏–Ω—Å—Ç—ã')

#     elif message.text == 'üç∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ª–∞':
#         await bot.send_message(message.from_user.id, '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç–µ–ª–∞')
    
#     else:
#         await message.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')



